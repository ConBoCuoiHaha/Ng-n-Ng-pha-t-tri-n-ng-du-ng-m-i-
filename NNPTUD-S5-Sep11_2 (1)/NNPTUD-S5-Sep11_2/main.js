LoadData();

//GET: domain:port//posts
//GET: domain:port/posts/id
async function LoadData() {
    try {
        let data = await fetch('http://localhost:3000/posts');
        let posts = await data.json();
        
        // X√≥a n·ªôi dung c≈© trong table
        let body = document.getElementById("body");
        body.innerHTML = "";
        
        // Ch·ªâ hi·ªÉn th·ªã c√°c post ch∆∞a b·ªã x√≥a m·ªÅm
        for (const post of posts) {
            if(!post.isDelete){
                body.innerHTML += convertDataToHTML(post);
            }
        }
        
        // C·∫≠p nh·∫≠t th·ªëng k√™
        updateStats(posts);
        
    } catch (error) {
        console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error);
        alert('L·ªói khi t·∫£i d·ªØ li·ªáu: ' + error.message);
    }
}

function convertDataToHTML(post) {
    let result = "<tr>";
    result += "<td><span class='id-display'>ID: " + post.id + "</span></td>";
    result += "<td><strong>" + post.title + "</strong></td>";
    result += "<td><span class='views-display'>üëÅÔ∏è " + post.views.toLocaleString() + "</span></td>";
    result += "<td><button class='btn btn-danger' onclick='Delete(\""+post.id+"\")'>üóëÔ∏è X√≥a</button></td>";
    result += "</tr>";
    return result;
}

// H√†m l·∫•y ID t·ª± tƒÉng - c·∫£i ti·∫øn ƒë·ªÉ x·ª≠ l√Ω c·∫£ string v√† number
async function getMaxID(){
    try {
        let res = await fetch('http://localhost:3000/posts');
        let posts = await res.json();
        
        // L·ªçc ra c√°c ID h·ª£p l·ªá (lo·∫°i b·ªè null, undefined, empty string)
        let validIds = posts
            .map(post => post.id)
            .filter(id => id !== null && id !== undefined && id !== '')
            .map(id => {
                // Chuy·ªÉn ƒë·ªïi sang number, n·∫øu kh√¥ng ƒë∆∞·ª£c th√¨ tr·∫£ v·ªÅ 0
                let numId = parseInt(id);
                return isNaN(numId) ? 0 : numId;
            });
        
        // N·∫øu kh√¥ng c√≥ ID n√†o h·ª£p l·ªá, tr·∫£ v·ªÅ 0
        if (validIds.length === 0) {
            return 0;
        }
        
        return Math.max(...validIds);
    } catch (error) {
        console.error('L·ªói khi l·∫•y Max ID:', error);
        return 0;
    }
}

// H√†m t·∫°o ID t·ª± tƒÉng m·ªõi
async function generateNewID(){
    let maxId = await getMaxID();
    return (maxId + 1).toString();
}



//POST: domain:port//posts + body
async function SaveData(){
    try {
        let id = document.getElementById("id").value;
        let title = document.getElementById("title").value;
        let view = document.getElementById("view").value;
        
        // Validate input
        if (!title.trim()) {
            alert('Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ!');
            return;
        }
        
        if (!view || isNaN(parseInt(view))) {
            alert('Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£t xem h·ª£p l·ªá!');
            return;
        }
        
        let dataObj = {
            title: title.trim(),
            views: parseInt(view),
            isDelete: false // M·∫∑c ƒë·ªãnh kh√¥ng b·ªã x√≥a
        };
        
        // Ki·ªÉm tra xem c√≥ ph·∫£i update hay create m·ªõi
        if (id && id.trim()) {
            // Update existing post
            let response = await fetch("http://localhost:3000/posts/" + id);
            if (response.ok) {
                dataObj.id = id;
                let res = await fetch('http://localhost:3000/posts/' + id, {
                    method: 'PUT',
                    body: JSON.stringify(dataObj),
                    headers: {
                        "Content-Type": "application/json"
                    }
                });
                
                if (res.ok) {
                    alert('C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng!');
                    LoadData(); // Reload data
                    clearForm();
                } else {
                    alert('L·ªói khi c·∫≠p nh·∫≠t b√†i vi·∫øt!');
                }
            } else {
                alert('Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt v·ªõi ID: ' + id);
            }
        } else {
            // Create new post v·ªõi ID t·ª± tƒÉng
            dataObj.id = await generateNewID();
            let res = await fetch('http://localhost:3000/posts', {
                method: 'POST',
                body: JSON.stringify(dataObj),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            
            if (res.ok) {
                alert('T·∫°o b√†i vi·∫øt m·ªõi th√†nh c√¥ng v·ªõi ID: ' + dataObj.id);
                LoadData(); // Reload data
                clearForm();
            } else {
                alert('L·ªói khi t·∫°o b√†i vi·∫øt m·ªõi!');
            }
        }
    } catch (error) {
        console.error('L·ªói khi l∆∞u d·ªØ li·ªáu:', error);
        alert('L·ªói khi l∆∞u d·ªØ li·ªáu: ' + error.message);
    }
}

// H√†m x√≥a form sau khi l∆∞u
function clearForm() {
    document.getElementById("id").value = "";
    document.getElementById("title").value = "";
    document.getElementById("view").value = "";
}
//PUT: domain:port//posts/id + body

//SOFT DELETE: domain:port//posts/id (thay v√¨ x√≥a c·ª©ng, ch·ªâ ƒë√°nh d·∫•u isDelete = true)
async function Delete(id){
    try {
        // X√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
        if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y?')) {
            return;
        }
        
        let res = await fetch('http://localhost:3000/posts/' + id);
        if (res.ok) {
            let obj = await res.json();
            
            // Ki·ªÉm tra xem ƒë√£ b·ªã x√≥a ch∆∞a
            if (obj.isDelete) {
                alert('B√†i vi·∫øt n√†y ƒë√£ b·ªã x√≥a r·ªìi!');
                LoadData(); // Reload ƒë·ªÉ c·∫≠p nh·∫≠t UI
                return;
            }
            
            // Th·ª±c hi·ªán soft delete
            obj.isDelete = true;
            obj.deletedAt = new Date().toISOString(); // Th√™m th·ªùi gian x√≥a ƒë·ªÉ tracking
            
            let result = await fetch('http://localhost:3000/posts/' + id, {
                method: 'PUT',
                body: JSON.stringify(obj),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            
            if (result.ok) {
                alert('X√≥a b√†i vi·∫øt th√†nh c√¥ng!');
                LoadData(); // Reload data ƒë·ªÉ c·∫≠p nh·∫≠t UI
            } else {
                alert('L·ªói khi x√≥a b√†i vi·∫øt!');
            }
        } else {
            alert('Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt v·ªõi ID: ' + id);
        }
    } catch (error) {
        console.error('L·ªói khi x√≥a b√†i vi·∫øt:', error);
        alert('L·ªói khi x√≥a b√†i vi·∫øt: ' + error.message);
    }
}

// H√†m kh√¥i ph·ª•c b√†i vi·∫øt ƒë√£ b·ªã x√≥a m·ªÅm (bonus feature)
async function RestorePost(id) {
    try {
        let res = await fetch('http://localhost:3000/posts/' + id);
        if (res.ok) {
            let obj = await res.json();
            obj.isDelete = false;
            delete obj.deletedAt; // X√≥a th·ªùi gian x√≥a
            
            let result = await fetch('http://localhost:3000/posts/' + id, {
                method: 'PUT',
                body: JSON.stringify(obj),
                headers: {
                    "Content-Type": "application/json"
                }
            });
            
            if (result.ok) {
                alert('Kh√¥i ph·ª•c b√†i vi·∫øt th√†nh c√¥ng!');
                LoadData();
            } else {
                alert('L·ªói khi kh√¥i ph·ª•c b√†i vi·∫øt!');
            }
        }
    } catch (error) {
        console.error('L·ªói khi kh√¥i ph·ª•c b√†i vi·∫øt:', error);
        alert('L·ªói khi kh√¥i ph·ª•c b√†i vi·∫øt: ' + error.message);
    }
}

// H√†m c·∫≠p nh·∫≠t th·ªëng k√™
function updateStats(posts) {
    try {
        const totalPosts = posts.length;
        const activePosts = posts.filter(post => !post.isDelete).length;
        const deletedPosts = posts.filter(post => post.isDelete).length;
        const totalViews = posts
            .filter(post => !post.isDelete)
            .reduce((sum, post) => sum + (parseInt(post.views) || 0), 0);
        
        // C·∫≠p nh·∫≠t UI v·ªõi design ƒë·∫πp h∆°n
        const statsElement = document.getElementById('stats');
        if (statsElement) {
            statsElement.innerHTML = `
                <div class="stat-item">
                    <div class="stat-number">${totalPosts}</div>
                    <div class="stat-label">T·ªïng b√†i vi·∫øt</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${activePosts}</div>
                    <div class="stat-label">ƒêang hi·ªÉn th·ªã</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${deletedPosts}</div>
                    <div class="stat-label">ƒê√£ x√≥a m·ªÅm</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${totalViews.toLocaleString()}</div>
                    <div class="stat-label">T·ªïng l∆∞·ª£t xem</div>
                </div>
            `;
        }
        
        // Hi·ªÉn th·ªã empty state n·∫øu kh√¥ng c√≥ b√†i vi·∫øt n√†o
        const emptyState = document.getElementById('emptyState');
        const tableContainer = document.querySelector('.table-container table');
        
        if (activePosts === 0) {
            if (emptyState) emptyState.style.display = 'block';
            if (tableContainer) tableContainer.style.display = 'none';
        } else {
            if (emptyState) emptyState.style.display = 'none';
            if (tableContainer) tableContainer.style.display = 'table';
        }
        
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t th·ªëng k√™:', error);
    }
}